;****************************************************
; MACROS
;****************************************************

lbapacket.off_size: equ 0
lbapacket.off_count: equ 2
lbapacket.off_addr0: equ 4
lbapacket.off_addr1: equ 6
lbapacket.off_sect0: equ 8
lbapacket.off_sect1: equ 10
lbapacket.off_sect2: equ 12
lbapacket.off_sect3: equ 14

loader.begin:   equ     0x800   ; Location of 2nd stage loader
loader.exec:    equ     0x804   ; 2nd stage execution starts here

;****************************************************
; CODE
;****************************************************
[ORG 0x7C00]        ; We are loaded by the bios at 0x7C00
[BITS 16]           ; We are still in 16-bit Real Mode
loader_record:
    jmp loader_copy_location
    nop
;****************************************************
; FAT Volume Location
;****************************************************
.system:    db "BIRDLODR", 0

times       5Ah-($-$$) db 0

;****************************************************
; Bootloader Entry Point
;****************************************************
loader_copy_location:
    cli
    xor     ax, ax
    mov     ss, ax
    mov     sp, 0x600
    push    ax          ; AX = 0
    pop     es          ; ES = 0
    push    cs          ; 
    pop     ds          ; DS = CS

    ; Get position in memory
    call .getaddr               ; Implicitly pushes the address after this instr
.getaddr:                       ; Onto the stack
    pop     si                  ; Retrieve the address generated by call (this address)
                                ; Subtract our current addr by the length of the loader_entry procedure so far
    sub     si, .getaddr - loader_record
    cld                         ; String operations will now increment index registers
    mov     di, sp              ; Stack is at addr 0x600, move that into destination index

    ; Clear 0x500-0x600
    sub     di, 0x100   ; DI = 0x500 
    mov     cx, 0x80
    repnz   stosw

    ;Copy this loader into 600h
    mov     cx, 0x100  
    repnz   movsw  

    ; Clear DS because apparently CS = 7c0 when booting using the El Torito standard
    push    es
    pop     ds
    jmp     0:loader_start      ; Jumps to 0x600 + .start

loader_start:
    mov     byte [drive], dl    ; Save boot drive (stored in dl by bios)

    ; Initialize lba packet
    mov     byte [lba_packet + lbapacket.off_size], 16
    mov     byte [lba_packet + lbapacket.off_addr0 + 1], 0x08

    ; Check for lba persistance, we are not supporting floppy disks
    cmp     dl, byte 0x80       ; Drive numbers less than 0x80 are for floppy drives.
    jl      .no_lba
.not_floppy:
    ; Check for Extended Disk Drive Intallation
    mov     ah, byte 0x41       
    mov     bx, word 0x55AA     ; Required for intterupt to be valid.
    clc                         ; Clear Carry Flag
    int     0x13                ; Disk Services (Extended Disk Drive Installation Check)
    jc      .no_lba             ; Carry bit set on extensions not supported.

    ; Verify magic number
    cmp     bx, word 0x55AA     ; Will still be 0xAA55 if extensions installed.
    jne     .no_lba
    
    ; CX = API subset support bitmap.
    test    cl, byte 1          ; If set, extended disk access functions (AH=42h-44h, 47h, 48h) are supported.
    jnz     .present_lba        ; If set, we have a functioning lba, otherwise continue into no_lba
.no_lba:
    mov     si, lba_not_found
    jmp     terminate

.present_lba:


;****************************************************
; Functions
;****************************************************

; Pre: ds:si zero terminated string to write
; Post: the string is printed.
print:
    lodsb
    or      al, al
    jz      .end 
    mov     ah, byte 0x0E
    mov     bx, word 11
    int    10h
    jmp     print
.end: 
    ret

terminate:
    push    si              ; Save Source Index
    mov     si, loader_record.system
    call    print
    mov     si, panic
    call    print

    pop     si              ; Retrieve saved Source Index
    call    print   
    mov     si, found
    call    print
    
    sti 
    xor     ax, ax
    int     16h             ; Await input
    
    mov     al, 0xFE
    out     0x64, al
    jmp     far 0xFFFF:0    ; Invoke BIOS POST



;****************************************************
; DATA SECTION
;****************************************************

panic:              db      "-PANIC: ", 0
lba_not_found:      db      "LBA support", 0
stage2_not_found:   db      "FS0:\BIRDLOADER\LOADER", 0
found:              db      " not found", 10, 13, 0
drive:              db      0
lba_packet:         TIMES 16 db 0
spc_packet:         TIMES 0x13 db 0
                    TIMES 0x01B0-($-$$) db 0

; Data right before the partition table
stage2_addr:        dd      0x0FFFFFFFF,0   ; 0x1B0  Stage 2 loader address
                                            ;        Should be set by mkfs
                                    
diskid:             dd      0               ; 0x1B8 WinNT expects this here.
                    dw      0

; 0x1BE first partition entry

TIMES   510 - ($-$$) db 0   ;; 0-Pad Sector
dw      0xAA55              ;; Boot signature
loader_record_end: